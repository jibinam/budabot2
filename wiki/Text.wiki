= How to use the Text class =

The text class allows you to format a message, create a fancy header, create an image tag, and create links.  There are 4 types of links you can create in Anarchy Online: blob links, chatcmd links, user links, and item links.

== Format message ==
Typically, you won't need this functionality as it is called automatically when you send a message with `$chatBot->send()`.  However, in some cases you may need it.  This how

{{{
$msg = Text::format_message($input);
}}}

Where $input is the string containing Budabot markup tags.  There are the tags that Budabot currently supports in text (and how it converts them):

{{{
<header>" => $chatBot->settings['default_header_color']
<highlight>" => $chatBot->settings['default_highlight_color']
<black>" => "<font color='#000000'>"
<white>" => "<font color='#FFFFFF'>"
<yellow>" => "<font color='#FFFF00'>"
<blue>" => "<font color='#8CB5FF'>"
<green>" => "<font color='#00DE42'>"
<red>" => "<font color='#ff0000'>"
<orange>" => "<font color='#FCA712'>"
<grey>" => "<font color='#C3C3C3'>"
<cyan>" => "<font color='#00FFFF'>"
<neutral>" => $chatBot->settings['default_neut_color']
<omni>" => $chatBot->settings['default_omni_color']
<clan>" => $chatBot->settings['default_clan_color']
<unknown>" => $chatBot->settings['default_unknown_color']
<myname>" => $chatBot->vars["name"]
<myguild>" => $chatBot->vars["my_guild"]
<tab>" => "    "
<end>" => "</font>"
<symbol>" => $chatBot->settings["symbol"])
}}}

== Fancy headers ==
By convention, most blobs will use the format `<header> :::::: $title :::::: <end>` for the top line of the blob.  However, the text class allows you to create a fancy header that will 'fade' the color in and out.  Format:

{{{
$header = Text::make_header($title, $links);
}}}

Where `$title` will be the text to display and `$links` is an optional param that lets you specify which links, if any, you want to appear next to the header.  If you want to leave the default links, just leave the `$links` parameter off.  If you don't want any links, pass in 'none' for the `$links` parameter.  For custom links, make `$links` an array where the key will be the name of the link, and the value will be the chatcmd to execute when it's clicked on.

Example:

{{{
$header = Text::make_header("Budabot Help", "none");
$content = "This is the help file for Budabot";
$blob = Text::make_blob("Help for Budabot", $header . "\n" . $content);
$chatBot->send($blob, 'guild');
}}}

== Images ==
Any image in the AO database can be displayed within a blob.  This is the format for the call:

{{{
$image = Text::make_image($imageid);
}}}

Where `$imageid` is the id of the image in the AO database.  This is how you would use it:

{{{
$image = Text::make_image(84203);
$blob = Text::make_blob('Click me', $image);
$chatBot->send($blob, 'guild');
}}}

This will create a blob link in guild channel which, when clicked, will open an info window and display an image (in the example it's the image that we use for Adventurers in the online list).

== Chatcmd links ==
Chatcmd links allow you to create a link that, when clicked on, will cause the client to execute the chatcmd in the link.  This is typically used to create links that send tells back to the bot so the user does not have to manually type the command.

To create a chatcmd link:

{{{
$link = Text::make_chatcmd('Restart', '/tell <myname> <symbol>restart');
}}}

Note that you can also specify an optional `$style` parameter for chatcmd links.

Also note that chatcmd links only work inside of blob links, so to use you would do something like this:

{{{
$link = Text::make_chatcmd('Restart', '/tell <myname> <symbol>restart');
$blob = Text::make_blob('Click me', $link);
$chatBot->send($blob, 'Tyrence');
}}}

This would create a link named 'Click me' that when clicked would open up an info window with a link named 'Restart'.  If the user click the 'Restart' link, they would execute the chatcmd '/tell bot !restart' and the bot would restart (if the user had high enough access level to restart the bot).

== User links ==
User links were added in 2009 or 2010 by Funcom.  This let's you create a link of a character's name and gives the client a few more options.  If you left click the name, it will open up a chat window with the player.  If you right click the name, it will give you a small menu where you can either send a message to the user, ignore the user, or invite the user to your private channel.

To create a user link:

{{{
$userlink = Text::make_userlink($playername);
}}}

Note that you can also specify an optional `$style` parameter for user links.

For instance:
{{{
$userlink = Text::make_userlink('Tyrence');
$chatBot->send("$userlink was banned by Funcom for no reason", 'guild');
}}}

This would create a link in the guild channel that said: 'Tyrence was banned by Funcom for no reason" with 'Tyrence' being a link that users could right click or left click on.

== Item links ==
Item links are a way to display an item link the same very users can drop items into chat and display them.

To create an item link:

{{{
$item = Text::make_item($lowId, $highId, $ql, $name);
}}}

For instance, to create an item link of Sword of the Illuminated, ql 153 you would do and display it in the guild channel you would do:

{{{
$item = Text::make_item(245578, 254579, 153, "Sword of the Illuminated");
$chatBot->send($item, 'guild');
}}}

== Blob links ==
Blob links show up as info windows for the client and are used for showing large amounts of data that typically can't be shown in one or two lines.  To create a blob link:

{{{
$blob = Text::make_blob($name, $content, $style);
}}}

Where `$name` is what the name of the link will be, `$content` is what will be in the info window, and `$style` is an option variable that you can use to style the link.  For instance, to create a blob link named 'Click me' that will display 'Hi there!' inside, and won't contain the underline (and then send it to a player named 'Tyrence') you would do:

{{{
$blob = Text::make_blob('Click me', 'Hi there!', 'text-decoration: none');
$chatBot->send($blob, 'Tyrence');
}}}

Note that the `$style` parameter is optional, and left off most of the time:

{{{
$blob = Text::make_blob('Click me', 'Hi there!');
$chatBot->send($blob, 'Tyrence');
}}}

== "Pagewise" Blob Formatting ==

Anarchy Online has a maximum blob size.  There is some debate as to whether it is 8000 or 12000, so Budabot has a setting for it.  This setting defaults to 7500.  Unfortunately, for a command that generates a lot of output to a blob, this can often result in the blob being split into multiple pages at bad locations.

Pagewise Blob Formatting is a system by which the Text class will automatically break output in a more elegant fashion, without requiring individual modules to track the blob size.  The function call is identical to creating a normal blob link:

{{{
$blob = Text::make_blob('Click me', $content);
$chatBot->send($blob, 'Norb');
}}}

The difference is that $content must be an array of the following format:

{{{

$content = array(
    0 => array(
         "header" => "See below!",
         "content" => "See below!",
         "footer" => "See below!",
         "header_incomplete" => "See below! (advanced)",
         "footer_incomplete" => "See below! (advanced)"
    ),
    1 => array( ... ),
    ...
);
}}}

This is an array of arrays.  The top level array, `$content`, is ordered numerically.  Each entry in the top level array is considered a distinct section of the page, that does not need to be in the same page as surrounding sections (but would naturally prefer to).

The low level arrays, `$content[0]`, are mappings of a pre-defined string key to the value.  There is a special case where if an index of the array is _not_ an array, but is a string, then it is treated as a section with no header or footer.

Standard Keys:
  * "*header*" contains any header to this section, as well as any opening formatting tags.
  * "*content*" is the raw contents of the section - What you're displaying here.  This is the only required key.
  * "*footer*" is any closing formatting tags (ie closing tags that were opened in "header"), plus any formatting/spacing/empty lines before the next section.

Advanced Keys:
These are special cases for when the content of a section is too big to fit into a single page.  These are optional.
  * "*header_incomplete*" is placed in the new page before the rest of the content for this section.
  * "*footer_incomplete*"  is placed at the end of the current page before creating a new page.  This should be used to close up any formatting that would cause blob problems, or with a short message noting the section is continued.

Examples:

{{{
$content = array();

// A simple single section with all basic keys.
$content []= array(
    "header" => "<highlight>", 
    "content" => "Spammy output!", 
    "footer" => "<end>\n\n");

// A simple section without header or footer.
$content []= "Spammy output!\n\n";

// A simple section with no header, but with a footer for blank lines.
$content []= array(
    "content" => "This section is followed by 2 blank lines.", 
    "footer" => "\n\n");

// An advanced section with a smaller header_incomplete in event of blob-split.
$content []= array(
    "header" => "<highlight>Norb's dirty secrets!<end>\nIn all their horrific and nauseating glory.\n\n",
    "header_incomplete" => "<highlight>Norb's dirty secrets!<end> - continued.\n\n",
    "content" => "You wish you knew those secrets!  For now, assume this is at least 10,000 characters worth of dirty secrets.",
    "footer" => "\n\n");

// An advanced section with a footer_incomplete letting you know the section continues on the next page.
$content []= array(
    "header" => "<highlight>People who like Cheese:<end>\n\n",
    "content" => "Aardy, Abcde, Adam, ... Zebra, Zeebat, Zylophonic, Zzzzz",
    "footer" => "\n\n Long list, right? \n\n",
    "footer_incomplete" => "\n\n This list is so long it continues on the next page!");

}}}

When the system does need to split output into multiple pages, it will first attempt to do it between sections.  If it can't split there, then it will do it mid-section.  It will _only_ split in the "content"; please keep your "header", "footer", etc to reasonably small sizes (typically less than 100 characters).

When splitting mid-section, the system prefers to split on a newline or `<`pagebreak`>` tag.  If your content is spaced over several lines, then you don't need to work about any special support.  However, if you are outputting a list on a single line (like of all characters of a certain org rank), then you will need to include `<`pagebreak`>` tags in the content.

In the event that a section's "content" is too big to fit into a single page, and has no suitable break points (newlines or `<`pagebreak`>` tags), the section will be dropped and not output.


*Special Cases*:
  * In the event that a section's "footer" would create a new page without any "content", the "footer" is dropped entirely.
  * If "header_incomplete" is not defined, but the section splits over multiple pages, "header" is rendered to the new page before the rest of "content".
  * If "header", "footer", or "footer_incomplete" is not defined, it is treated as a blank string.
  * A section will not 'jump' to a new page if the current page is less than half its maximum size. 