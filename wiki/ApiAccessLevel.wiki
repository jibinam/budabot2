#summary The AccessLevel class provides functionality for checking character's level of access.


=Class !AccessLevel=

The AccessLevel class provides functionality for checking character's level of access.

Lond description here.

==Variables==
    * array [#Variable_$ACCESS_LEVELS $ACCESS_LEVELS] _`[static`]_

==Methods==
    * boolean [#boolean_checkAccess_(_string_$sender_,_string_$accessLevel_) checkAccess] ( string <var>$sender</var>, string <var>$accessLevel</var> )
    * mixed [#mixed_checkSingleAccess_(_mixed_$sender_,_mixed_$accessLevel_) checkSingleAccess] ( mixed <var>$sender</var>, mixed <var>$accessLevel</var> )
    * mixed [#mixed_normalizeAccessLevel_(_mixed_$accessLevel_) normalizeAccessLevel] ( mixed <var>$accessLevel</var> )
    * mixed [#mixed_getDisplayName_(_mixed_$accessLevel_) getDisplayName] ( mixed <var>$accessLevel</var> )
    * mixed [#mixed_getSingleAccessLevel_(_mixed_$sender_) getSingleAccessLevel] ( mixed <var>$sender</var> )
    * mixed [#mixed_getAccessLevelForCharacter_(_mixed_$sender_) getAccessLevelForCharacter] ( mixed <var>$sender</var> )
    * mixed [#mixed_checkGuildAdmin_(_mixed_$sender_,_mixed_$accessLevel_) checkGuildAdmin] ( mixed <var>$sender</var>, mixed <var>$accessLevel</var> )
    * mixed [#mixed_compareAccessLevels_(_mixed_$accessLevel1_,_mixed_$accessL compareAccessLevels] ( mixed <var>$accessLevel1</var>, mixed <var>$accessLevel2</var> )
    * mixed [#mixed_compareCharacterAccessLevels_(_mixed_$char1_,_mixed_$char2 compareCharacterAccessLevels] ( mixed <var>$char1</var>, mixed <var>$char2</var> )

----
==Variables Documentation==
===Variable $ACCESS_LEVELS===

<h4>Type</h4>
    array

<h4>Default Value</h4>
{{{
array('none' => 0, 'superadmin' => 1,  'admin' => 2, 'mod' => 3, 'rl' => 4, 'guild' => 6, 'member' => 7, 'all' => 8)
}}}

----
==Methods Documentation==

===boolean checkAccess ( string <var>$sender</var>, string <var>$accessLevel</var> )===

This method checks if given $sender has at least $accessLevel rights.

Normally, you don't have to worry about access levels in the bot.
The bot will automatically restrict access to commands based on the
access level setting on the command and the access level of the user
trying to access the command.

However, there are some cases where you may need this functionality.
For instance, you may have a command that displays the names of the last
ten people to send a tell to the bot.  You may wish to display a "ban"
link when a moderator or higher uses that command.

To check if a player named 'Tyrence' has raidleader access,
you would do:

<code>
if ($this->accessLevel->checkAccess("Tyrence", "raidleader")) {
   // Tyrence has [at least] raidleader access level
} else {
   // Tyrence does not have raidleader access level
}
</code>

Note that this will return true if 'Tyrence' is a raidleader on your
bot, but also if he is anything higher, such as moderator,
administrator, or superadmin.

If the setting 'alts_inherit_admin' is enabled, this command will return
the character's "effective" admin level - Not necessarily that
character's set access level, but the access level inherited from its
main (if it has one).

<h4>Parameters</h4>
    * <var>$sender</var> - the name of the person you want to check access on
    * <var>$accessLevel</var> - can be one of: superadmin, admininistrator, moderator, raidleader, guild, member, all

<h4>Returns</h4>
    true if $sender has at least $accessLevel, false otherwise

===mixed checkSingleAccess ( mixed <var>$sender</var>, mixed <var>$accessLevel</var> )===

===mixed normalizeAccessLevel ( mixed <var>$accessLevel</var> )===

===mixed getDisplayName ( mixed <var>$accessLevel</var> )===

===mixed getSingleAccessLevel ( mixed <var>$sender</var> )===

===mixed getAccessLevelForCharacter ( mixed <var>$sender</var> )===

===mixed checkGuildAdmin ( mixed <var>$sender</var>, mixed <var>$accessLevel</var> )===

===mixed compareAccessLevels ( mixed <var>$accessLevel1</var>, mixed <var>$accessLevel2</var> )===

Returns a positive number if $accessLevel1 is a greater access level than $accessLevel2,
a negative number if $accessLevel1 is a lesser access level than $accessLevel2,
and 0 if the access levels are equal.

===mixed compareCharacterAccessLevels ( mixed <var>$char1</var>, mixed <var>$char2</var> )===


<br />
----
Budabot documentation generated by [http://apigen.org/ ApiGen 2.8.0] using [http://budabot2.googlecode.com/svn/trunk/docs/apigen_wiki_templates/ custom wiki templates].
